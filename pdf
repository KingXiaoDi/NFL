from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter#process_pdf
from pdfminer.pdfpage import PDFPage
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
import re

from io import BytesIO

def pdf_to_text(pdfname):
    # PDFMiner boilerplate
    rsrcmgr = PDFResourceManager()
    sio = BytesIO()
    codec = 'utf-8'
    laparams = LAParams()
    device = TextConverter(rsrcmgr, sio, codec=codec, laparams=laparams)
    interpreter = PDFPageInterpreter(rsrcmgr, device)
    # Extract text
    fp = open(pdfname, 'rb')
    for page in PDFPage.get_pages(fp):
        interpreter.process_page(page)
    fp.close()
    # Get text from StringIO
    text = sio.getvalue()
    # Cleanup
    device.close()
    sio.close()
    return text
    
text = (pdf_to_text('c:/users/yoshi/documents/football/ravens/2017/gb/PlayStats.pdf'))
text = text.replace(b'\x0c', b'\n')
split = text.split(b'\n')

downDistInfo = []
playDetail = []

down = re.compile('[0-9]-[0-9]')
playData = re.compile('(\(([0-9]?){2}:)')
page = re.compile('Page')
detail = ''
for line in split:
    if line.decode('utf-8') == '':
        pass
    else:
        if down.match(line.decode('utf-8')[0:3]):
            downDistInfo.append(line.decode('utf-8'))
        elif page.match(line.decode('utf-8')[0:4]):
            pass
        elif line == b'\x0c':    
            pass
#        elif line.decode('utf-8')[0:8] == 'Quarter:':
 #           print (line.decode('utf-8'))
  #          playDetail.append(line.decode('utf-8'))
        elif playData.match(line.decode('utf-8')[0:4]):
            if detail != '':
                playDetail.append(detail)
            detail = (line.decode('utf-8')) + ' '
        else:
            detail += (line.decode('utf-8')) + ' '
playDetail.append(detail)
print (playDetail[0].split(' Play Statistics Report '))
'''for play in playDetail:
    if ('Quarter:') in play:
        print (play)
        print ()
    else:
        print (play)
        print ()'''
